{"version":3,"file":"static/webpack/1.8da06da2602e6aedacfd.hot-update.js","sources":["webpack:///./components/HorizontalBarChart/HorizontalBarChart.js"],"sourcesContent":["import React,  { useEffect } from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport * as d3 from \"d3\";\nimport { keys } from 'd3-collection';\n\nconst formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\");\nconst formatPercent = d3.format(\".1%\");\n\nlet slices = ['- >30%', '- 10-30%', '- <10%',\n'Neutral', '+ <10%', '+ 10-30%', '+ >30%'];\n\n// Legend formatting.\nconst tickSize = 0;\nconst legendWidth = 350;\nconst legendHeight = 44 + tickSize;\nconst marginTop = 18;\nconst marginRight = 30;\nconst marginBottom = 16 + tickSize;\nconst marginLeft = 72;\nconst ticks = legendWidth / 64;\nconst title = \"Expected Revenue Change\";\n\nexport default function HorizontalBarChart(props) {\n    const width = 500;\n  \tconst margin = ({top: 30, right: 40, bottom: 0, left: 50});\n  \tconst height = props.data.length * 25 + margin.top + margin.bottom;\n\n\tuseEffect(() => {\n\t\tlet y = d3.scaleBand()\n\t    \t.domain(props.data.map(d => d.name))\n\t    \t.range([margin.top, height - margin.bottom])\n\t    \t.padding(0.08);\n\n\t\tlet\tx = d3.scaleLinear()\n\t\t    .range([margin.left, width - margin.right]);\n\n\t\tlet yAxis = g => g\n\t    \t.attr(\"transform\", `translate(${margin.left},0)`)\n\t    \t.call(d3.axisLeft(y).tickSizeOuter(0))\n\t    \t.call(g => g.selectAll(\".domain\").remove());\n\n\t\tlet xAxis = g => g\n\t\t\t.attr(\"transform\", `translate(0,${margin.top})`)\n\t\t\t.call(d3.axisTop(x).ticks(width / 100, \"%\"))\n\t\t\t.call(g => g.selectAll(\".domain\").remove());\n\n\t\tlet series = d3.stack()\n\t    \t.keys(slices)\n\t    \t.offset(d3.stackOffsetExpand)(props.data)\n\t    \t.map(d => (d.forEach(v => v.key = d.key), d));\n\n\t\tconst color = d3.scaleOrdinal()\n\t\t\t.domain(slices)\n\t\t\t.range(d3.schemeSpectral[slices.length])\n\t\t\t.unknown(\"#ccc\");\n\n    \tconst chart = d3.select(\"#svg\")\n      \t\t.attr(\"viewBox\", [-60, 0, width + margin.right, height])\n      \t\t.style(\"display\", \"auto\");\n\t\tchart.append(\"g\")\n\t\t\t.selectAll(\"g\")\n\t\t\t.data(series)\n\t\t\t.enter().append(\"g\")\n\t\t\t\t.attr(\"fill\", d => color(d.key))\n\t\t\t.selectAll(\"rect\")\n\t\t\t.data(d => d)\n\t\t\t.join(\"rect\")\n\t\t\t   \t.attr(\"x\", d => x(d[0]))\n\t\t\t   \t.attr(\"y\", d => y(d.data.name))\n\t\t\t   \t.attr(\"width\", d => x(d[1]) - x(d[0]))\n\t\t\t   \t.attr(\"height\", y.bandwidth())\n\t\t\t.append(\"title\")\n\t\t\t .text(d => `${d.data.name} ${d.key}\n            ${formatPercent(d[1] - d[0])} (${formatValue(d.data[d.key])})`);\n\n\t  \tchart.append(\"g\")\n\t     \t.call(xAxis);\n\t  \tchart.append(\"g\")\n\t     \t.call(yAxis)\n       \t\t.selectAll(\".tick text\");\n \n\n   \t\t// Add legend\n\t \tlet x1 = d3.scaleLinear()\n\t     \t.domain([-1, color.range().length - 1])\n\t     \t.rangeRound([marginLeft, legendWidth - marginRight]);\n\n\t \tconst thresholds = color.domain();\n\t \tconst legend = d3.select(\"#legend\")\n       \t\t.attr(\"viewBox\", [0, 0, legendWidth, legendHeight])\n       \t\t.style(\"display\", \"auto\");\n\t \tlet tickFormat;\n\t \tconst thresholdFormat = tickFormat === undefined ? \n\t \t\td => d : typeof tickFormat === \"string\" ?\n\t \t\t\t\t d3.format(tickFormat) : tickFormat;\n\n\t \tlegend.append(\"g\")\n\t\t \t.selectAll(\"rect\")\n\t\t \t.data(color.range())\n\t\t \t.join(\"rect\")\n\t\t \t.attr(\"x\", (d, i) => x1(i - 1))\n\t\t \t.attr(\"y\", marginTop)\n\t\t \t.attr(\"width\", (d, i) => x1(i) - x1(i - 1))\n\t\t \t.attr(\"height\", legendHeight - marginTop - marginBottom)\n\t\t \t.attr(\"fill\", d => d);\n\n\t \tlet tickValues = d3.range(thresholds.length);\n\t \ttickFormat = i => thresholdFormat(thresholds[i], i);\n\n\t\tlegend.append(\"g\")\n    \t\t.attr(\"transform\", `translate(-20, ${legendHeight - marginBottom})`)\n    \t\t.call(d3.axisBottom(x1)\n      \t\t.ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined)\n      \t\t.tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined)\n      \t\t.tickSize(tickSize)\n      \t\t.tickValues(tickValues))\n    \t\t.call(g => g.select(\".domain\").remove())\n    \t\t.call(g => g.append(\"text\")\n\t\t\t.attr(\"x\", marginLeft + 20)\n      \t\t.attr(\"y\", marginTop + marginBottom - legendHeight - 6)\n      \t\t.attr(\"text-anchor\", \"start\")\n      \t\t.text(title));\n  \t});\n\n\treturn (\n\t\t<div>\n\t\t  <svg className={\"f\"} id=\"legend\" viewBox={[0, 0, legendWidth, legendHeight]}/>\n\t\t  <br/>\n\t\t  <svg className={\"horizontalBarChart\"} id=\"svg\" viewBox={[-60, 0, width, height]}/>\n\t\t</div>\n\t    );\n\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AAAA;AAGA;AAAA;AAHA;AACA;AAIA;AAAA;AAGA;AAAA;AAHA;AACA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAKA;AAGA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AAKA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/landing.js.8d412080ed329e56db58.hot-update.js","sources":["webpack:///./pages-sections/MapSection.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport dynamic from 'next/dynamic';\nimport chroma from \"chroma-js\";\n\nimport classNames from \"classnames\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport SimpleHorizontalBarChart from \"components/SimpleHorizontalBarChart/SimpleHorizontalBarChart.js\";\n\nimport CountryCard from \"pages-sections/CountryCard.js\";\n\nimport styles from \"assets/jss/common/pages/sections/mapStyle.js\";\nconst useStyles = makeStyles(styles);\n\nconst VectorMap = dynamic(\n  () => import(\"react-jvectormap\").then((m) => m.VectorMap),\n  { ssr: false, }\n);\n\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetBottom);\n\nconst { getCode, getName, getData } = require(\"country-list\");\n\nexport default function MapSection(props) {\n\tconst classes = useStyles();\n  const [showCountryCard, setShowCountryCard] = useState(false);\n  const [country, setCountry] = useState(\"\");\n  const [countryCode, setCountryCode] = useState(\"\");\n\n  const countryCardRef = useRef(null);\n  const executeScroll = () => scrollToRef(countryCardRef);\n\n  function handleClick(e, code){\n    if (code in props.countrycounts) {\n      setCountryCode(code);\n      setCountry(getName(code));\n      setTimeout(()=> { Array.from(\n        document.getElementsByClassName(\"jvectormap-tip\"))\n        .forEach((el) => { el.style.display = 'none' }); },100);\n      if (props.countrycounts[code] > 9) {\n        setShowCountryCard(true);\n        if (countryCardRef.current !== null)\n            countryCardRef.current.scrollIntoView({ block: 'end', behavior: 'smooth' });\n      }\n    } \n  }\n\n  const toolTipCountry = (e, el, code) => {\n    if (!(code in props.countrycounts)) {\n      el.html(el.html()).css(\"z-index\",\"-1\");\n    } else {\n      el.css(\"z-index\",\"11\").css(\"fontSize\",\"15px\");\n      el.html('<b>' + el.html() + '</b>' + '</br>' + props.countrycounts[code] + ' responses');\n    }\n  };\n\n  return (\n      <div className={classes.section}>\n        <GridContainer justify=\"center\">\n          <GridItem cs={12} sm={12} md={12}>\n            <h2 className={classes.title}>Countries Surveyed</h2>\n            <h4 className={classes.description}>\n              {\"Note: Country-specific information for countries with < 10 responses are not shown for privacy reasons.\"}\n            </h4>\n              <GridContainer justify=\"center\">\n                <GridItem xs={12} sm={12} md={12}>\n                  <VectorMap\n                    map={\"world_mill\"}\n                    backgroundColor=\"transparent\"\n                    zoomOnScroll={false}\n                    containerStyle={{\n                      width: \"100%\",\n                      height: \"700px\"\n                    }}\n                    onRegionClick={handleClick}\n                    containerClassName=\"map\"\n                    focusOn={{\n                      x: 0.6,\n                      y: 0.6,\n                      scale: 2,\n                      animate: true\n                    }}\n                    panOnDrag={true}\n                    showTooltip={true}\n                    regionStyle={{\n                      initial: {\n                        fill: \"#e4e4e4\",\n                        \"fill-opacity\": 0.9,\n                        \"stroke-width\": 0,\n                        \"stroke-opacity\": 0\n                      },\n                      hover: {\n                         cursor: \"pointer\"\n                      }\n                    }}\n                    onRegionTipShow={toolTipCountry}\n                    series={{\n                      regions: [\n                        {\n                          values: props.countrycounts,\n                          scale: ['#b2ebf2', '#0277bd'],\n                          normalizeFunction: \"polynomial\"\n                        }\n                      ]\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={12} md={12}>\n                </GridItem> \n              </GridContainer>\n              <div style={{\n                  display: showCountryCard ? \"block\" : \"none\"}}>\n              <GridContainer justify=\"center\">\n                    <CountryCard country={ country } countryCode={ countryCode } countrychallenges={ props.countrychallenges } countrycounts={ props.countrycounts } countrytimeopen={ props.countrytimeopen } countryrevchange={ props.countryrevchange }/>\n              </GridContainer>\n                  <div ref={ countryCardRef }/>\n            </div>\n          </GridItem>\n        </GridContainer>\n      </div>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAPA;AAWA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;;;;A","sourceRoot":""}